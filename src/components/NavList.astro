---
const { items = [], currentPath = '' } = Astro.props;

// Helper function to normalize URL for comparison
function normalizeUrl(url) {
  if (!url) return '';
  
  // Decode first if needed
  let normalized = url;
  try {
    normalized = decodeURIComponent(url);
  } catch {
    // If decoding fails, use as-is
  }
  
  // Add leading slash if not present
  if (!normalized.startsWith('/')) {
    normalized = '/' + normalized;
  }
  
  // Remove file extensions and index
  normalized = normalized
    .replace('.html', '')
    .replace('.md', '')
    .replace('/index', '')
    .replace(/\/+/g, '/')  // Replace multiple slashes with single slash
    .replace(/\/$/, '');   // Remove trailing slash for comparison
  
  return normalized;
}

// Helper function to URL-encode a path properly
function encodeUrlPath(path) {
  if (!path) return '';
  // Split by '/', encode each segment, then join back
  // This preserves the path structure while encoding special characters
  return path.split('/').map(segment => encodeURIComponent(segment)).join('/');
}

const normalizedCurrent = normalizeUrl(currentPath);
---

<ul>
  {items.map(item => {
    if (item.children) {
      // Check if this section should be open (has active child)
      const hasActiveChild = item.children.some(child => {
        const childUrl = normalizeUrl(child.url);
        if (normalizedCurrent === childUrl) return true;
        // Check grandchildren
        if (child.children) {
          return child.children.some(grandchild => {
            const grandchildUrl = normalizeUrl(grandchild.url);
            return normalizedCurrent === grandchildUrl;
          });
        }
        return false;
      });

      return (
        <li>
          <details open={hasActiveChild}>
            <summary>{item.title}</summary>
            <Astro.self items={item.children} currentPath={currentPath} />
          </details>
        </li>
      );
    } else {
      const itemUrl = normalizeUrl(item.url);
      const isActive = normalizedCurrent === itemUrl;
      
      if (item.title !== "index") {
        // Build URL with encoded path, ensuring proper leading/trailing slashes
        const encodedPath = encodeUrlPath(item.url);
        const href = `/${encodedPath}/`;
        
        return (
          <li>
            <a 
              href={href}
              class={isActive ? 'active' : ''}
            >
              {item.title}
            </a>
          </li>
        );
      }
    }
  })}
</ul>
