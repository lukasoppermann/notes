---
const { folders = [] } = Astro.props;

// Helper function to URL-encode a path properly
function encodeUrlPath(path) {
  if (!path) return '';
  // Split by '/', encode each segment, then join back
  // This preserves the path structure while encoding special characters
  return path.split('/').map(segment => encodeURIComponent(segment)).join('/');
}

// Recursive function to render cards
function processFolder(folder) {
  if (!folder.children) return null;
  
  let firstFile = null;
  let fileCount = 0;
  
  for (const child of folder.children) {
    if (child.url && child.title !== "index") {
      fileCount++;
      if (!firstFile) {
        firstFile = child;
      }
    }
  }
  
  return { folder, firstFile, fileCount };
}
---

{folders.map(folder => {
  const result = processFolder(folder);
  
  return (
    <>
      {result && result.fileCount > 0 && result.firstFile && (
        <a class="card-link" href={`/${encodeUrlPath(result.firstFile.url)}/`}>
          <div class="card">
            <div class="card-title">{result.folder.title}</div>
            <div>{result.firstFile.title}</div>
          </div>
        </a>
      )}
      {folder.children && (
        <Astro.self folders={folder.children} />
      )}
    </>
  );
})}
