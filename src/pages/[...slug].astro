---
import Layout from '../layouts/Layout.astro';
import { marked } from 'marked';
import { basename } from 'path';
import { readdirSync, readFileSync, statSync } from 'fs';
import { join } from 'path';
import { processObsidianTransclusions } from '../utils/obsidian.js';

export async function getStaticPaths() {
  const notesDir = join(process.cwd(), 'src/data/notes');
  
  // Recursively get all markdown files
  function getAllMarkdownFiles(dir, baseDir = notesDir) {
    const files = [];
    try {
      const items = readdirSync(dir);
      
      for (const item of items) {
        const fullPath = join(dir, item);
        const stat = statSync(fullPath);
        
        if (stat.isDirectory()) {
          files.push(...getAllMarkdownFiles(fullPath, baseDir));
        } else if (item.endsWith('.md')) {
          // Get relative path from notes directory
          const relativePath = fullPath.replace(baseDir + '/', '').replace('.md', '');
          files.push({
            slug: relativePath,
            fullPath: fullPath,
          });
        }
      }
    } catch (error) {
      console.error(`Error reading directory ${dir}:`, error);
      throw error;
    }
    
    return files;
  }
  
  const allFiles = getAllMarkdownFiles(notesDir);
  
  // Create paths for both original slug and normalized slug (with em-dashes replaced)
  const paths = [];
  for (const file of allFiles) {
    // Normalize slug: replace em-dashes with hyphens
    const normalizedSlug = file.slug.replace(/â€”/g, '-');
    
    paths.push({
      params: { slug: normalizedSlug },
      props: { 
        filepath: file.fullPath,
        originalSlug: file.slug
      },
    });
  }
  
  return paths;
}

const { filepath, originalSlug } = Astro.props;
const { slug } = Astro.params;

// Read the file content with error handling
let content;
try {
  content = readFileSync(filepath, 'utf-8');
} catch (error) {
  console.error(`Error reading file ${filepath}:`, error);
  throw new Error(`Failed to read file: ${filepath}`);
}

// Get the notes directory
const notesDir = join(process.cwd(), 'src/data/notes');

// Process Obsidian transclusions
const processedContent = processObsidianTransclusions(content, notesDir);

// Use marked to render markdown
let htmlContent = marked(processedContent);

// Post-process the HTML to wrap tables in divs and images in figures
// Wrap tables in div.table-wrapper
htmlContent = htmlContent.replace(/<table>/g, '<div class="table-wrapper"><table>');
htmlContent = htmlContent.replace(/<\/table>/g, '</table></div>');

// Wrap standalone images in figure elements (but not those already in other elements)
htmlContent = htmlContent.replace(/<p>(<img[^>]*>)<\/p>/g, '<figure>$1</figure>');

// Use original slug for title to preserve special characters
const title = basename(originalSlug || slug);
---

<Layout title={title}>
  <article set:html={htmlContent} />
</Layout>
