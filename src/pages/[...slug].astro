---
import Layout from '../layouts/Layout.astro';
import { marked } from 'marked';
import { basename } from 'path';
import { readdirSync, readFileSync, statSync } from 'fs';
import { join } from 'path';
import { processObsidianTransclusions } from '../utils/obsidian.js';

export async function getStaticPaths() {
  const notesDir = join(process.cwd(), 'src/data/notes');
  
  // Recursively get all markdown files
  function getAllMarkdownFiles(dir, baseDir = notesDir) {
    const files = [];
    const items = readdirSync(dir);
    
    for (const item of items) {
      const fullPath = join(dir, item);
      const stat = statSync(fullPath);
      
      if (stat.isDirectory()) {
        files.push(...getAllMarkdownFiles(fullPath, baseDir));
      } else if (item.endsWith('.md')) {
        // Get relative path from notes directory
        const relativePath = fullPath.replace(baseDir + '/', '').replace('.md', '');
        files.push({
          slug: relativePath,
          fullPath: fullPath,
        });
      }
    }
    
    return files;
  }
  
  const allFiles = getAllMarkdownFiles(notesDir);
  
  // Create paths for both original slug and normalized slug (with em-dashes replaced)
  const paths = [];
  for (const file of allFiles) {
    // Add the normalized slug (em-dashes replaced with hyphens)
    const normalizedSlug = file.slug.replace(/â€”/g, '-');
    paths.push({
      params: { slug: normalizedSlug },
      props: { 
        filepath: file.fullPath,
        originalSlug: file.slug
      },
    });
  }
  
  return paths;
}

const { filepath, originalSlug } = Astro.props;
const { slug } = Astro.params;

// Read the file content
const content = readFileSync(filepath, 'utf-8');

// Get the notes directory
const notesDir = join(process.cwd(), 'src/data/notes');

// Process Obsidian transclusions
const processedContent = processObsidianTransclusions(content, notesDir);

// Use marked to render markdown
const htmlContent = marked(processedContent);

// Use original slug for title to preserve special characters
const title = basename(originalSlug || slug);
---

<Layout title={title}>
  <article set:html={htmlContent} />
</Layout>
